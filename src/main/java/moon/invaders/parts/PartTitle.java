package moon.invaders.parts;

import java.awt.Image;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferInt;
import java.util.Vector;

import abyss.lunarengine.APart;
import abyss.lunarengine.LunarEngine;
import abyss.lunarengine.LunarEngineTools;
import abyss.lunarengine.Screen;
import abyss.lunarengine.sinatra.Sinatra;
import moon.invaders.GameController;
import moon.invaders.Invaders2Main;
import moon.invaders.Resources;
import moon.invaders.Textwriter;

public class PartTitle extends APart{
	public static int[] screendataTitleBackground;
	private static int offsetToBackgroundImage=0;
	
	private static int backgroundWidth;
	private static int backgroundHeight;
	private int centerX;
	private int centerY;

	private int[] dataText;

	private final static int shift=8;
	private final static int textX=512+50-00+100;
	private final static int textY=256+150-00;
	private Sinatra sinText1X;
	private Sinatra sinText1Y;

	private Sinatra sinText3X;
	private Sinatra sinText3Y;

	private int indexCopy=150+80*Invaders2Main.screenWidth;
	private int indexCopyCount;
	private int bendXS;
	private int bendYS;
	private int bendXE;
	private int bendYE;

	private int bendXDeltaS;
	private int bendXDeltaE;
	private int bendYDeltaS;
	private int bendYDeltaE;

	private int bendXDelta;
	private int bendYDelta;
	private int bendX;
	private int bendY;

	private int x1Text=0 << shift;
	private int y1Text=0 << shift;
	private int x2Text=textX << shift;
	private int y2Text=0 << shift;
	private int x3Text=(textX-60) << shift;
	private int y3Text=(textY-40) << shift;
	private int x4Text=20 << shift;
	private int y4Text=textY-20 << shift;

	private int[] offsetTable;

	private Vector<char[][]> vecText=new Vector<char[][]>();

	private static final int TEXTFADESTATUS_SHOWTEXT=1;
	private static final int TEXTFADESTATUS_FADEOUT=2;
	private static final int TEXTFADESTATUS_FADEIN=3;
	private static int textFadeStatus;
	private static int fadeDelay;
	private static int showTextDelay=360;
	private static int showTextDelayCount;
	private static int fontOffset;
	private static int fontPages=15;
	private static int textpage;
	
	private static char[][] charsText;
	
  	public PartTitle() {
		createText();
		sinText1X=Sinatra.getInstance(new double[]{512.0,3.0,11.0,0.703125,0.0,360.0,10.0,1.40625,0.0,360.0,1.0,0.703125,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinText1Y=Sinatra.getInstance(new double[]{510.0,3.0,10.0,2.109375,0.0,360.0,10.0,1.40625,0.0,360.0,1.0,0.703125,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinText3X=Sinatra.getInstance(new double[]{512.0,3.0,25.0,0.703125,0.0,360.0,11.0,2.8125,0.0,360.0,1.0,0.703125,0.0,360.0});//generated by LunarTools Sinus Editor 1.0
		sinText3Y=Sinatra.getInstance(new double[]{512.0,3.0,25.0,1.40625,0.0,360.0,15.0,1.40625,0.0,360.0,	1.0,0.703125,0.0,360.0});//generated by LunarTools Sinus Editor 1.0

		Image imageTitle=LunarEngineTools.createImage(jFrame,"data/title.png");
		BufferedImage bufferedImageTitle=new BufferedImage(textX,textY,BufferedImage.TYPE_INT_ARGB);
		bufferedImageTitle.getGraphics().drawImage(imageTitle,0,0,jFrame);
		DataBufferInt databufferTitle=(DataBufferInt)bufferedImageTitle.getRaster().getDataBuffer();
		dataText=databufferTitle.getData();

		backgroundWidth=Resources.BACKGROUND_WIDTH;
		backgroundHeight=Resources.BACKGROUND_HEIGHT;
		createOffsetTable();
	}
	
	@Override
	public void precalc(){
		textFadeStatus=TEXTFADESTATUS_SHOWTEXT;
		showTextDelayCount=showTextDelay;
		textpage=0;
		fontOffset=0;
		fadeDelay=0;
	}

	public void vbi(){
		if(LunarEngine.keycode==32){
			GameController.startGame();
		}
		doTitlePicMove();
		if(++offsetToBackgroundImage>backgroundHeight){
			offsetToBackgroundImage-=backgroundHeight;
		}
	}

	@Override
	public void worker1(){
		final int[] screendataWork=LunarEngine.screendataToWork;
		bendXS=x1Text;
		bendYS=y1Text;
		bendXE=x2Text;
		bendYE=y2Text;

		bendXDeltaS=(x4Text-x1Text)/textY;
		bendXDeltaE=(x3Text-x2Text)/textY;
		bendYDeltaS=(y4Text-y1Text)/textY;
		bendYDeltaE=(y3Text-y2Text)/textY;

		indexCopyCount=indexCopy;
		int i;
		int x;
		for(int y=0;y<textY;y++){
			bendXDelta=(bendXE-bendXS)/textX;
			bendYDelta=(bendYE-bendYS)/textX;
			bendX=bendXS;
			bendY=bendYS;
			for(x=0;x<textX;x++){
				i=dataText[(bendX >> shift) + (bendY >> shift)*textX];
				bendX+=bendXDelta;
				bendY+=bendYDelta;

				if(i<0){
					screendataWork[indexCopyCount]=i;
				}
				indexCopyCount++;
			}
			indexCopyCount+=(Invaders2Main.screenWidth-textX);
			bendXS+=bendXDeltaS;
			bendYS+=bendYDeltaS;
			bendXE+=bendXDeltaE;
			bendYE+=bendYDeltaE;
		}

		switch (textFadeStatus) {
		case TEXTFADESTATUS_SHOWTEXT:
			if(--showTextDelayCount==0) {
				textFadeStatus=TEXTFADESTATUS_FADEOUT;
				fadeDelay=1;
			}
			break;
		case TEXTFADESTATUS_FADEOUT:
			if(--fadeDelay==0) {
				fadeDelay=8;
				if(++fontOffset==fontPages) {
					textFadeStatus=TEXTFADESTATUS_FADEIN;
					if(++textpage==vecText.size()) {
						textpage=0;
					}
				}
			}
			break;
		case TEXTFADESTATUS_FADEIN:
			if(--fadeDelay==0) {
				fadeDelay=8;
				if(--fontOffset==0) {
					showTextDelayCount=360;
					textFadeStatus=TEXTFADESTATUS_SHOWTEXT;
				}
			}
			break;
		}
		
		charsText=vecText.get(textpage);
		for(i=0;i<4;i++) {
			Textwriter.writeTextDoubleY(charsText[i], (Screen.screenSizeX-(charsText[i].length*16))/2, 450+50*i,fontOffset);
		}
	}

	private void doTitlePicMove(){
		x1Text=sinText1X.getNextValue(3);
		x1Text=(x1Text+21) << shift;
		y1Text=sinText1Y.getNextValue(2);
		y1Text=(y1Text+20) << shift;

		x2Text=sinText1X.getNextDeltaValue(140);
		x2Text=(x2Text+21+400) << shift;
		y2Text=sinText1Y.getNextDeltaValue(90);
		y2Text=(y2Text+20) << shift;

		x3Text=sinText3X.getNextValue(1);
		x3Text=(x3Text+31+400) << shift;
		y3Text=sinText3Y.getNextValue(2);
		y3Text=(y3Text+35+330) << shift;

		x4Text=sinText3X.getNextDeltaValue(270);
		x4Text=(x4Text+31) << shift;
		y4Text=sinText3Y.getNextDeltaValue(170);
		y4Text=(y4Text+35+330) << shift;
	}

	@Override
	public void worker2(){
		final int[] screendataReset=LunarEngine.screendataToReset;
		final int render2_delta=offsetToBackgroundImage*1024;
		for(int i=0;i<backgroundWidth*Screen.screenSizeY;){
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			//now 15 copies of the previous line, decreases the execution time from 16ms to 12ms (on my aged CPU)
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
			screendataReset[i]=screendataTitleBackground[offsetTable[i++]+render2_delta];
		}
	}

	private void createOffsetTable(){
		offsetTable=new int[backgroundWidth*Screen.screenSizeY];
		centerX=0;
		centerY=backgroundWidth+100;
		double rad=3.141592654/180.0;
		double x1=0;
		double y1=0;
		int radius=0;
		int indexX=0;
		int indexY=0;
		for(int radiusIndex=0;radiusIndex<Screen.screenSizeY;radiusIndex++){
			radius=radiusIndex+(backgroundWidth-Screen.screenSizeY);
			for(int angleIndex=0;angleIndex<backgroundWidth;angleIndex++){
				double angle=180.0*angleIndex/backgroundWidth-90;
				x1=Math.cos(rad*angle)*radius;
				y1=Math.sin(rad*angle)*radius;
				indexX=centerX+(int)(x1+0.5);
				indexY=centerY+(int)(y1+0.5);
				offsetTable[angleIndex+radiusIndex*backgroundWidth]=indexX+backgroundWidth*indexY;
			}
		}
	}

	private void addTextblock(String text1,String text2,String text3,String text4) {
		vecText.add(new char[][] {
			text1.toCharArray(),
			text2.toCharArray(),
			text3.toCharArray(),
			text4.toCharArray()});
	}
	
	private void createText() {
		vecText=new Vector<char[][]>();
		//       012345678901234567890123456789012345678901234567890123456789
		addTextblock(
				"INVADERS",
				"",
				"25TH ANNIVERSARY",
				"1992 * 2017");
		
		addTextblock(
				"ESC......EXIT      ",
				"SPACE....START GAME",
				"",
				"");
		
		addTextblock(
				"SPACESHIP CONTROL",
				"CURSOR...LEFT/RIGHT",
				"X........FIRE      ",
				"");
		
		addTextblock(
				"TESTVERSION 2.0.8",
				"THIS VERSION CONTAINS 28 LEVELS",
				"",
				"");
		
		addTextblock(
				"# # # CREDITS # # #",
				"BACKGROUNDS              NASA/HUBBLE SPACE TELESCOPE",
				"WWW.SPACETELESCOPE.ORG",
				"");
		
		addTextblock(
				"MUSIC * TITLE PICTURE * SPACESHIPS     EWALD WINKLER",
				"SOUNDS                                 PUBLIC DOMAIN",
				"SPACESHIPS                          ALEXANDER MATTEL",
				"");
		
		addTextblock(
				"SPACESHIPS                              MICHAEL KOPF",
				"PROGRAM * SPACESHIPS * LEVEL DESIGN    THOMAS MATTEL",
				"",
				"");
		
		addTextblock(
				"THIS GAME IS FREEWARE",
				"",
				"PURE JAVA * PURE SOFTWARE RENDERING",
				"NO CLEAN CODE * CAN YOU SMELL IT :)");
		
		addTextblock(
				"# TOOLS USED #",
				"PROGRAMMING:   ECLIPSE MARS",
				"BOB EDITING:  GRAPHICS GALE",
				"SOUND EDITING:     AUDACITY");

		addTextblock(
				"# CONVERTING FROM AMIGA FORMAT #",
				"GRAPHICS:       IRFAN VIEW",
				"MUSIC:    VLC MEDIA PLAYER",
				"");

		addTextblock(
				"",
				"# # # HAVE FUN # # #",
				"",
				"");

	}
}
